// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: poker.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Rank int32

const (
	Rank_UNKNOWN_Rank Rank = 0
	Rank_Two          Rank = 2
	Rank_Three        Rank = 3
	Rank_Four         Rank = 4
	Rank_Five         Rank = 5
	Rank_Six          Rank = 6
	Rank_Severn       Rank = 7
	Rank_Eight        Rank = 8
	Rank_Nine         Rank = 9
	Rank_Ten          Rank = 10
	Rank_Jack         Rank = 11
	Rank_Queen        Rank = 12
	Rank_King         Rank = 13
	Rank_Ace          Rank = 14
)

// Enum value maps for Rank.
var (
	Rank_name = map[int32]string{
		0:  "UNKNOWN_Rank",
		2:  "Two",
		3:  "Three",
		4:  "Four",
		5:  "Five",
		6:  "Six",
		7:  "Severn",
		8:  "Eight",
		9:  "Nine",
		10: "Ten",
		11: "Jack",
		12: "Queen",
		13: "King",
		14: "Ace",
	}
	Rank_value = map[string]int32{
		"UNKNOWN_Rank": 0,
		"Two":          2,
		"Three":        3,
		"Four":         4,
		"Five":         5,
		"Six":          6,
		"Severn":       7,
		"Eight":        8,
		"Nine":         9,
		"Ten":          10,
		"Jack":         11,
		"Queen":        12,
		"King":         13,
		"Ace":          14,
	}
)

func (x Rank) Enum() *Rank {
	p := new(Rank)
	*p = x
	return p
}

func (x Rank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rank) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[0].Descriptor()
}

func (Rank) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[0]
}

func (x Rank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rank.Descriptor instead.
func (Rank) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

type Suit int32

const (
	Suit_UNKNOWN_Suit Suit = 0
	Suit_Spades       Suit = 1
	Suit_Dimonds      Suit = 2
	Suit_Clubs        Suit = 3
	Suit_Hearts       Suit = 4
)

// Enum value maps for Suit.
var (
	Suit_name = map[int32]string{
		0: "UNKNOWN_Suit",
		1: "Spades",
		2: "Dimonds",
		3: "Clubs",
		4: "Hearts",
	}
	Suit_value = map[string]int32{
		"UNKNOWN_Suit": 0,
		"Spades":       1,
		"Dimonds":      2,
		"Clubs":        3,
		"Hearts":       4,
	}
)

func (x Suit) Enum() *Suit {
	p := new(Suit)
	*p = x
	return p
}

func (x Suit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suit) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[1].Descriptor()
}

func (Suit) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[1]
}

func (x Suit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suit.Descriptor instead.
func (Suit) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

type State int32

const (
	State_UNKNOWN_State State = 0
	State_Active        State = 1
	State_Folded        State = 2
	State_Called        State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UNKNOWN_State",
		1: "Active",
		2: "Folded",
		3: "Called",
	}
	State_value = map[string]int32{
		"UNKNOWN_State": 0,
		"Active":        1,
		"Folded":        2,
		"Called":        3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[2].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[2]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{2}
}

type Action int32

const (
	Action_UNKNOWN_Action Action = 0
	Action_Fold           Action = 1
	// Bet refers to both betting and raising
	Action_Bet Action = 2
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "UNKNOWN_Action",
		1: "Fold",
		2: "Bet",
	}
	Action_value = map[string]int32{
		"UNKNOWN_Action": 0,
		"Fold":           1,
		"Bet":            2,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[3].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[3]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{3}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank Rank `protobuf:"varint,1,opt,name=rank,proto3,enum=pb.Rank" json:"rank,omitempty"`
	Suit Suit `protobuf:"varint,2,opt,name=suit,proto3,enum=pb.Suit" json:"suit,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

func (x *Card) GetRank() Rank {
	if x != nil {
		return x.Rank
	}
	return Rank_UNKNOWN_Rank
}

func (x *Card) GetSuit() Suit {
	if x != nil {
		return x.Suit
	}
	return Suit_UNKNOWN_Suit
}

type Pot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    uint64   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Players []string `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *Pot) Reset() {
	*x = Pot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pot) ProtoMessage() {}

func (x *Pot) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pot.ProtoReflect.Descriptor instead.
func (*Pot) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{2}
}

func (x *Pot) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Pot) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid     string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State    State  `protobuf:"varint,3,opt,name=state,proto3,enum=pb.State" json:"state,omitempty"`
	Bank     uint64 `protobuf:"varint,4,opt,name=bank,proto3" json:"bank,omitempty"`
	BetSoFar uint64 `protobuf:"varint,5,opt,name=bet_so_far,json=betSoFar,proto3" json:"bet_so_far,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{3}
}

func (x *Player) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNKNOWN_State
}

func (x *Player) GetBank() uint64 {
	if x != nil {
		return x.Bank
	}
	return 0
}

func (x *Player) GetBetSoFar() uint64 {
	if x != nil {
		return x.BetSoFar
	}
	return 0
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerGuid             string `protobuf:"bytes,1,opt,name=player_guid,json=playerGuid,proto3" json:"player_guid,omitempty"`
	DecisionTimeoutSeconds uint64 `protobuf:"varint,2,opt,name=decision_timeout_seconds,json=decisionTimeoutSeconds,proto3" json:"decision_timeout_seconds,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterRequest) GetPlayerGuid() string {
	if x != nil {
		return x.PlayerGuid
	}
	return ""
}

func (x *RegisterRequest) GetDecisionTimeoutSeconds() uint64 {
	if x != nil {
		return x.DecisionTimeoutSeconds
	}
	return 0
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotName string `protobuf:"bytes,1,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterResponse) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

type ActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Players at the table
	Players []*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	// Cards on the board inc player's hole cards
	HoleCards []*Card `protobuf:"bytes,2,rep,name=hole_cards,json=holeCards,proto3" json:"hole_cards,omitempty"`
	Flop      []*Card `protobuf:"bytes,3,rep,name=flop,proto3" json:"flop,omitempty"`
	Turn      *Card   `protobuf:"bytes,4,opt,name=turn,proto3" json:"turn,omitempty"`
	River     *Card   `protobuf:"bytes,5,opt,name=river,proto3" json:"river,omitempty"`
	// Chips on the table
	Pots        []*Pot `protobuf:"bytes,6,rep,name=pots,proto3" json:"pots,omitempty"`
	BetSoFar    uint64 `protobuf:"varint,7,opt,name=bet_so_far,json=betSoFar,proto3" json:"bet_so_far,omitempty"`
	BetToPlayer uint64 `protobuf:"varint,8,opt,name=bet_to_player,json=betToPlayer,proto3" json:"bet_to_player,omitempty"`
	MinRaise    uint64 `protobuf:"varint,9,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`
}

func (x *ActionRequest) Reset() {
	*x = ActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequest) ProtoMessage() {}

func (x *ActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequest.ProtoReflect.Descriptor instead.
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{6}
}

func (x *ActionRequest) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *ActionRequest) GetHoleCards() []*Card {
	if x != nil {
		return x.HoleCards
	}
	return nil
}

func (x *ActionRequest) GetFlop() []*Card {
	if x != nil {
		return x.Flop
	}
	return nil
}

func (x *ActionRequest) GetTurn() *Card {
	if x != nil {
		return x.Turn
	}
	return nil
}

func (x *ActionRequest) GetRiver() *Card {
	if x != nil {
		return x.River
	}
	return nil
}

func (x *ActionRequest) GetPots() []*Pot {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *ActionRequest) GetBetSoFar() uint64 {
	if x != nil {
		return x.BetSoFar
	}
	return 0
}

func (x *ActionRequest) GetBetToPlayer() uint64 {
	if x != nil {
		return x.BetToPlayer
	}
	return 0
}

func (x *ActionRequest) GetMinRaise() uint64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

type ActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Action `protobuf:"varint,1,opt,name=action,proto3,enum=pb.Action" json:"action,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ActionResponse) Reset() {
	*x = ActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResponse) ProtoMessage() {}

func (x *ActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResponse.ProtoReflect.Descriptor instead.
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{7}
}

func (x *ActionResponse) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_UNKNOWN_Action
}

func (x *ActionResponse) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_poker_proto protoreflect.FileDescriptor

var file_poker_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x04, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x1c, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x52, 0x04, 0x73, 0x75, 0x69, 0x74, 0x22, 0x33,
	0x0a, 0x03, 0x50, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x62,
	0x65, 0x74, 0x5f, 0x73, 0x6f, 0x5f, 0x66, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x65, 0x74, 0x53, 0x6f, 0x46, 0x61, 0x72, 0x22, 0x6c, 0x0a, 0x0f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x27,
	0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x68, 0x6f,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x66, 0x6c, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x1e, 0x0a, 0x05, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x5f, 0x66, 0x61, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x74, 0x53, 0x6f, 0x46, 0x61, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x22,
	0x4c, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x9b, 0x01,
	0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x77, 0x6f, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x6f, 0x75, 0x72, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x76, 0x65, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x6e, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x69, 0x67, 0x68, 0x74, 0x10, 0x08,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x69, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x65,
	0x6e, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x61, 0x63, 0x6b, 0x10, 0x0b, 0x12, 0x09, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x67,
	0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x65, 0x10, 0x0e, 0x2a, 0x48, 0x0a, 0x04, 0x53,
	0x75, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x75, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x64, 0x65, 0x73, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x6c, 0x75, 0x62, 0x73, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x73, 0x10, 0x04, 0x2a, 0x3e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x2f, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6f, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x65, 0x74, 0x10, 0x02, 0x32, 0x70, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_poker_proto_rawDescOnce sync.Once
	file_poker_proto_rawDescData = file_poker_proto_rawDesc
)

func file_poker_proto_rawDescGZIP() []byte {
	file_poker_proto_rawDescOnce.Do(func() {
		file_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_poker_proto_rawDescData)
	})
	return file_poker_proto_rawDescData
}

var file_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_poker_proto_goTypes = []interface{}{
	(Rank)(0),                // 0: pb.Rank
	(Suit)(0),                // 1: pb.Suit
	(State)(0),               // 2: pb.State
	(Action)(0),              // 3: pb.Action
	(*Empty)(nil),            // 4: pb.Empty
	(*Card)(nil),             // 5: pb.Card
	(*Pot)(nil),              // 6: pb.Pot
	(*Player)(nil),           // 7: pb.Player
	(*RegisterRequest)(nil),  // 8: pb.RegisterRequest
	(*RegisterResponse)(nil), // 9: pb.RegisterResponse
	(*ActionRequest)(nil),    // 10: pb.ActionRequest
	(*ActionResponse)(nil),   // 11: pb.ActionResponse
}
var file_poker_proto_depIdxs = []int32{
	0,  // 0: pb.Card.rank:type_name -> pb.Rank
	1,  // 1: pb.Card.suit:type_name -> pb.Suit
	2,  // 2: pb.Player.state:type_name -> pb.State
	7,  // 3: pb.ActionRequest.players:type_name -> pb.Player
	5,  // 4: pb.ActionRequest.hole_cards:type_name -> pb.Card
	5,  // 5: pb.ActionRequest.flop:type_name -> pb.Card
	5,  // 6: pb.ActionRequest.turn:type_name -> pb.Card
	5,  // 7: pb.ActionRequest.river:type_name -> pb.Card
	6,  // 8: pb.ActionRequest.pots:type_name -> pb.Pot
	3,  // 9: pb.ActionResponse.action:type_name -> pb.Action
	8,  // 10: pb.Plugin.Register:input_type -> pb.RegisterRequest
	10, // 11: pb.Plugin.Action:input_type -> pb.ActionRequest
	9,  // 12: pb.Plugin.Register:output_type -> pb.RegisterResponse
	11, // 13: pb.Plugin.Action:output_type -> pb.ActionResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_poker_proto_init() }
func file_poker_proto_init() {
	if File_poker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poker_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_poker_proto_goTypes,
		DependencyIndexes: file_poker_proto_depIdxs,
		EnumInfos:         file_poker_proto_enumTypes,
		MessageInfos:      file_poker_proto_msgTypes,
	}.Build()
	File_poker_proto = out.File
	file_poker_proto_rawDesc = nil
	file_poker_proto_goTypes = nil
	file_poker_proto_depIdxs = nil
}
